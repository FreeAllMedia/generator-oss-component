"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _yeomanGenerator = require("yeoman-generator");

var _os = require("os");

var _os2 = _interopRequireDefault(_os);

describe("oss-component generator", function () {
  var name = undefined;

  before(function (done) {
    name = "testComponent";
    _yeomanGenerator.test.run(_path2["default"].join(__dirname, "../..")).inDir(_path2["default"].join(_os2["default"].tmpdir(), "/temp-test")).withOptions({ "skip-install": true }).withPrompts({
      name: name
    }).on("end", done);
  });

  describe("(licensing)", function () {
    it("should create a LICENSE file", function () {
      _yeomanGenerator.assert.file(["" + name + "/LICENSE.md"]);
    });
  });

  describe("(documentation)", function () {
    it("should create a README file", function () {
      _yeomanGenerator.assert.file(["" + name + "/README.md"]);
    });
  });

  describe("(package-description)", function () {
    it("should create a package.json file", function () {
      _yeomanGenerator.assert.file(["" + name + "/package.json"]);
    });
  });

  describe("(code quality)", function () {
    it("should create files for code climate support", function () {
      _yeomanGenerator.assert.file(["" + name + "/.codeclimate.yml"]);
      //autogenerated `${name}/lcov.info`
    });

    describe("(linting)", function () {
      it("should generate an eslint file", function () {
        _yeomanGenerator.assert.file(["" + name + "/.eslintrc"]);
      });

      it("should generate an jshint file", function () {
        _yeomanGenerator.assert.file(["" + name + "/.jshintrc"]);
      });
    });
  });

  describe("(collaboration support)", function () {
    describe("(coding)", function () {
      it("should create files for floobits support", function () {
        _yeomanGenerator.assert.file(["" + name + "/.floo", "" + name + "/.flooignore"]);
      });
    });

    describe("(source code management)", function () {
      it("should create utiliy git files", function () {
        _yeomanGenerator.assert.file(["" + name + "/.gitignore"]);
      });
    });
  });

  describe("(testing)", function () {
    it("should create files for karma", function () {
      _yeomanGenerator.assert.file(["" + name + "/.karma.conf.js"]);
    });

    it("should create files for sauce labs", function () {
      _yeomanGenerator.assert.file(["" + name + "/.sauce.json"]);
    });
  });

  describe("(continuous integration)", function () {
    it("should create files for Travis CI", function () {
      _yeomanGenerator.assert.file(["" + name + "/.travis.yml"]);
    });
  });

  describe("(automation)", function () {
    it("should create gulp related files", function () {
      _yeomanGenerator.assert.file(["" + name + "/gulpfile.babel.js", "" + name + "/tasks/build.js", "" + name + "/tasks/build-lib.js", "" + name + "/tasks/build-spec.js", "" + name + "/tasks/test.js", "" + name + "/tasks/test-local.js", "" + name + "/tasks/test-browsers.js", "" + name + "/paths.json"]);
    });
  });

  describe("(functionality)", function () {
    it("should generate an index", function () {
      _yeomanGenerator.assert.file(["" + name + "/index.js"]);
    });

    it("should generate a mock entry point with his test", function () {
      _yeomanGenerator.assert.file(["" + name + "/es6/lib/" + name + ".js", "" + name + "/es6/spec/" + name + ".spec.js"]);
    });

    it("should create es5 compatible files", function () {
      _yeomanGenerator.assert.file(["" + name + "/es5/lib/" + name + ".js", "" + name + "/es5/spec/" + name + ".spec.js"]);
    });
  });
});