import path from "path";
import {assert, test as helpers} from "yeoman-generator";
import os from "os";

describe("oss-component generator", () => {
  let name;

  before(done => {
    name = "testComponent";
    helpers.run(path.join(__dirname, "../.."))
	    .inDir(path.join(os.tmpdir(), "/temp-test"))
      .withOptions({ "skip-install": true })
	    .withPrompts({
	      name: name
	    })
	    .on("end", done);
  });

  describe("(licensing)", () => {
    it("should create a LICENSE file", () => {
      assert.file([`${name}/LICENSE.md`]);
    });
  });

  describe("(documentation)", () => {
    it("should create a README file", () => {
      assert.file([`${name}/README.md`]);
    });
  });

  describe("(package-description)", () => {
    it("should create a package.json file", () => {
      assert.file([`${name}/package.json`]);
    });
  });

  describe("(code quality)", () => {
    it("should create files for code climate support", () => {
      assert.file([`${name}/.codeclimate.yml`]);
      //autogenerated `${name}/lcov.info`
    });

    describe("(linting)", () => {
      it("should generate an eslint file", () => {
        assert.file([`${name}/.eslintrc`]);
      });

      it("should generate an jshint file", () => {
        assert.file([`${name}/.jshintrc`]);
      });
    });
  });

  describe("(collaboration support)", () => {
    describe("(coding)", () => {
      it("should create files for floobits support", () => {
        assert.file([`${name}/.floo`, `${name}/.flooignore`]);
      });
    });
    
    describe("(source code management)", () => {
      it("should create utiliy git files", () => {
        assert.file([`${name}/.gitignore`]);
      });
    });
  });

  describe("(testing)", () => {
    it("should create files for karma", () => {
      assert.file([`${name}/.karma.conf.js`]);
    });

    it("should create files for sauce labs", () => {
      assert.file([`${name}/.sauce.json`]);
    });
  });

  describe("(continuous integration)", () => {
    it("should create files for Travis CI", () => {
      assert.file([`${name}/.travis.yml`]);
    });
  });

  describe("(automation)", () => {
    it("should create gulp related files", () => {
      assert.file([`${name}/gulpfile.babel.js`,
        `${name}/tasks/build.js`,
        `${name}/tasks/build-lib.js`,
        `${name}/tasks/build-spec.js`,
        `${name}/tasks/test.js`,
        `${name}/tasks/test-local.js`,
        `${name}/tasks/test-browsers.js`,
        `${name}/paths.json`
      ]);
    });
  });

  describe("(functionality)", () => {
    it("should generate an index", () => {
      assert.file([`${name}/index.js`]);
    });

    it("should generate a mock entry point with his test", () => {
      assert.file([`${name}/es6/lib/${name}.js`,
        `${name}/es6/spec/${name}.spec.js`
      ]);
    });

    it("should create es5 compatible files", () => {
      assert.file([`${name}/es5/lib/${name}.js`,
        `${name}/es5/spec/${name}.spec.js`
      ]);
    });
  });
});
