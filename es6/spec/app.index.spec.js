import path from "path";
import {assert, test as helpers} from "yeoman-generator";
import os from "os";

describe("oss-component generator", () => {
  let name;

  before(done => {
    name = "testComponent";
    helpers.run(path.join(__dirname, "../../generators/app"))
	    .inDir(path.join(os.tmpdir(), "/temp-test"))
      .withOptions({ "skip-install": true })
	    .withPrompts({
	      name: name,
        description: "some description",
        organizationName: "org",
        floobits: true,
        sauceLabs: true,
        travis: true,
        floobitsWorkspace: "someworkspace",
        repositoryUrl: "somerepo",
        issueTrackerUrl: "someissue",
        homepage: "somehomepage"
	    })
	    .on("end", done);
  });

  describe("(licensing)", () => {
    it("should create a LICENSE file", () => {
      assert.file([`LICENSE.md`]);
    });
  });

  describe("(documentation)", () => {
    it("should create a README file", () => {
      assert.file([`README.md`]);
    });
  });

  describe("(package-description)", () => {
    it("should create a package.json file", () => {
      assert.file([`package.json`]);
    });
  });

  describe("(code quality)", () => {
    it("should create files for code climate support", () => {
      assert.file([`.codeclimate.yml`]);
      //autogenerated `lcov.info`
    });

    describe("(linting)", () => {
      it("should generate an eslint file", () => {
        assert.file([`.eslintrc`]);
      });

      it("should generate an jshint file", () => {
        assert.file([`.jshintrc`]);
      });
    });
  });

  describe("(collaboration support)", () => {
    describe("(coding)", () => {
      it("should create files for floobits support", () => {
        assert.file([`.floo`, `.flooignore`]);
      });
    });

    describe("(source code management)", () => {
      it("should create utiliy git files", () => {
        assert.file([`.gitignore`]);
      });
    });
  });

  describe("(testing)", () => {
    it("should create files for karma", () => {
      assert.file([`.karma.conf.js`]);
    });

    it("should create files for sauce labs", () => {
      assert.file([`.sauce.json`]);
    });
  });

  describe("(continuous integration)", () => {
    it("should create files for Travis CI", () => {
      assert.file([`.travis.yml`]);
    });
  });

  describe("(automation)", () => {
    it("should create gulp related files", () => {
      assert.file([`gulpfile.babel.js`,
        `tasks/build.js`,
        `tasks/build-lib.js`,
        `tasks/build-spec.js`,
        `tasks/test.js`,
        `tasks/test-local.js`,
        `tasks/test-browsers.js`,
        `paths.json`
      ]);
    });
  });

  describe("(functionality)", () => {
    it("should generate an index", () => {
      assert.file([`index.js`]);
    });

    it("should generate a mock entry point with his test", () => {
      assert.file([`es6/lib/${name}.js`,
        `es6/spec/${name}.spec.js`
      ]);
    });

    //suspended due to the time that takes to install dependencies
    //tested also with the actual yo command
    xit("should create es5 compatible files", () => {
      assert.file([`es5/lib/${name}.js`,
        `es5/spec/${name}.spec.js`
      ]);
    });
  });
});
